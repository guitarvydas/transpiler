#!/usr/bin/env node
//'use strict'


// ***
// *** Generated (see Makefile), do not edit
// ***


const fs = require ('fs');
const ohm = require ('ohm-js');

// helpers
function _ruleInit () {
}

function traceSpaces () {
    var s = '';
    var n = traceDepth;
    while (n > 0) {
        s += ' ';
        n -= 1;
    }
    s += `[${traceDepth.toString ()}]`;
    return s;
}

function _ruleEnter (ruleName) {
    if (tracing) {
        traceDepth += 1;
        var s = traceSpaces ();
        s += 'enter: ';
        s += ruleName.toString ();
        console.log (s);
    }
}

function _ruleExit (ruleName) {
    if (tracing) {
        var s = traceSpaces ();
        traceDepth -= 1;
        s += 'exit: ';
        s += ruleName.toString ();
        console.log (s);
    }
}

function getRwrGrammar () {
    return rwrGrammar;
}

  // helper functions
  var ruleName = "???";
  function setRuleName (s) { ruleName = s; return "";}
  function getRuleName () { return ruleName; }

/// end helpers

function compilerwr (rwrsrc, ohmlang) {
    // expand the string rwrsrc into JavaScript suitable for
    // inclusion as a semantic object for Ohm.js
    //
    var s = '';

    var generatedObject = {};
    

    // Step 1a. Create (internal) rwr transpiler. 
    var internalgrammar = ohmlang.grammar (rwrGrammar);
    var rwrcst = internalgrammar.match (rwrsrc);

    if (rwrcst.failed ()) {
	let len = rwrcst.getRightmostFailurePosition();
        let emsg = "FORMAT: syntax error in rewrite specification\nrightmostPosition=" + len + '\n';
        return [false, emsg];
    }
    // Step 1b. Transpile User's RWR spec to a JS object (for use with Ohm-JS)
    try {
        var sem = internalgrammar.createSemantics ();
        sem.addOperation ('_rwr', semObject);
        var generatedRwrWalker = sem (rwrcst);
        var generated = generatedRwrWalker._rwr ();
        return [true, generated];
    } catch (err) {
        var msg = "error generating code from RWR specification<br><br>" + err.message;
        return [false, msg];
    }
}


var tracing = false;
var traceDepth = 0;

const rwrGrammar =
      String.raw`
RWR {
top = spaces name spaces "{" spaces rule+ spaces "}" spaces more*
more = name spaces "{" spaces rule* spaces "}" spaces
rule = applySyntactic<RuleLHS> spaces "=" spaces rewriteString -- up
RuleLHS = 
  | name "[" Param* "]" spaces downString spaces -- down
  | name "[" Param* "]" -- nodown
rewriteString = "‛" char* "’" spaces
downString = "‛" char* "’"
char =
  | "«" nonBracketChar* "»" -- eval
  | "\\" "n" -- newline
  | "\\" any -- esc
  | ~"’" ~"]]" any     -- raw
nonBracketChar = ~"»" ~"«"  ~"’" ~"]]" any
name = nameFirst nameRest*
nameFirst = "_" | letter
nameRest = "_" | alnum
Param =
  | name "+" -- plus
  | name "*" -- star
  | name "?" -- opt
  | name     -- flat
comment = "//" (~"\n" any)* "\n"
space += comment
}
`;

function extractFormals (s) {
    var s0 = s
        .replace (/\n/g,',')
        .replace (/[A-Za-z0-9_]+ = /g,'')
        .replace (/\._[^;]+;/g,'')
        .replace (/,/,'')
	.replace (/_/g,'')
    ;
    return s0;
}

var varNameStack = [];

// xxx

//// top = spaces name spaces "{" spaces rule+ spaces "}" spaces more*
// top [ws1 name ws2 lb ws4 @rule ws5 rb ws3 @more] = [[{
// ${rule}
    // _terminal: function () { return this.sourceString; },
    // _iter: function (...children) { return children.map(c => c._rwr ()); },
    // spaces: function (x) { return this.sourceString; },
    // space: function (x) { return this.sourceString; }
// }
// ]]

const semObject = {

    top : function (_ws1,_name,_ws2,_lb,_ws4,_rule,_ws5,_rb,_ws3,_more) { 
        _ruleEnter ("top");

        var ws1 = _ws1._rwr ();
        var name = _name._rwr ();
        var ws2 = _ws2._rwr ();
        var lb = _lb._rwr ();
        var ws4 = _ws4._rwr ();
        var rule = _rule._rwr ().join ('');
        var ws5 = _ws5._rwr ();
        var rb = _rb._rwr ();
        var ws3 = _ws3._rwr ();
        var more = _more._rwr ().join ('');
        var _result = `{
${rule}${more}
    _terminal: function () { return this.sourceString; },
    _iter: function (...children) { return children.map(c => c._rwr ()); },
    spaces: function (x) { return this.sourceString; },
    space: function (x) { return this.sourceString; }
}
`; 
        _ruleExit ("top");
        return _result; 
    },

    more : function (_name,_ws2,_lb,_ws4,_rule,_ws5,_rb,_ws3) { 
        _ruleEnter ("top");

        var name = _name._rwr ();
        var ws2 = _ws2._rwr ();
        var lb = _lb._rwr ();
        var ws4 = _ws4._rwr ();
        var rule = _rule._rwr ().join ('');
        var ws5 = _ws5._rwr ();
        var rb = _rb._rwr ();
        var ws3 = _ws3._rwr ();
        var _result = `
${rule}
`; 
        _ruleExit ("top");
        return _result; 
    },


    ////
    


    rule_up : function (_lhs,_ws1,_keq,_ws2,_rws) { 
        _ruleEnter ("rule_up");

        var lhs = _lhs._rwr ();
        var ws1 = _ws1._rwr ();
        var keq = _keq._rwr ();
        var ws2 = _ws2._rwr ();
        var rws = _rws._rwr ();
        var _result = `${lhs}
_ruleExit ("${getRuleName ()}");
return ${rws}
},
`; 
        _ruleExit ("rule_up");
        return _result; 
    },
    ////
    
    // RuleLHS [name lb @Params rb] = [[${name}: function (${extractFormals(Params)}) {\n_ruleEnter ("${name}");${setRuleName (name)}${Params}
    // ]]
    RuleLHS_nodown : function (_name,_lb,_Params,_rb) { 
        _ruleEnter ("RuleLHS_nodown");

        var name = _name._rwr ();
        var lb = _lb._rwr ();
        var Params = _Params._rwr ().join ('');
        var rb = _rb._rwr ();
        var _result = `${name}: function (${extractFormals(Params)}) {\n_ruleEnter ("${name}");${setRuleName (name)}${Params}
`; 
        _ruleExit ("RuleLHS_nodown");
        return _result; 
    },
    
    RuleLHS_down : function (_name,_lb,_Params,_rb, _ws1, _downstring, _ws2) { 
        _ruleEnter ("RuleLHS_down");

        var name = _name._rwr ();
        var lb = _lb._rwr ();
        var Params = _Params._rwr ().join ('');
        var rb = _rb._rwr ();
        var _result = `${name}: function (${extractFormals(Params)}) {\n_ruleEnter ("${name}");${setRuleName (name)}\nvar _0 = ${_downstring._rwr ()};\n${Params}
`; 
        _ruleExit ("RuleLHS_down");
        return _result; 
    },

    ////


    // rewriteString [sb @cs se ws] = [[return \`${cs}\`;]]
    rewriteString : function (_sb,_cs,_se,_ws) { 
        _ruleEnter ("rewriteString");

        var sb = _sb._rwr ();
        var cs = _cs._rwr ().join ('');
        var se = _se._rwr ();
        var ws = _ws._rwr ();
        var _result = `\`${cs}\`;`; 
        _ruleExit ("rewriteString");
        return _result; 
    },

    downString : function (_sb,_cs,_se) { 
        _ruleEnter ("downString");

        var sb = _sb._rwr ();
        var cs = _cs._rwr ().join ('');
        var se = _se._rwr ();
        var _result = `\`${cs}\``; 
        _ruleExit ("downString");
        return _result; 
    },


    ////
    // char_eval [lb name rb] = [[\$\{${name}\}]]
    // char_raw [c] = [[${c}]]
    char_eval : function (_lb,_cs,_rb) { 
        _ruleEnter ("char_eval");

        var lb = _lb._rwr ();
        var name = _cs._rwr ().join ('');
        var rb = _rb._rwr ();
        var _result = `\$\{${name}\}`; 
        _ruleExit ("char_eval");
        return _result; 
    },
    
    char_newline : function (_slash, _c) { 
        _ruleEnter ("char_newline");

        var slash = _slash._rwr ();
        var c = _c._rwr ();
        var _result = `\n`; 
        _ruleExit ("char_newline");
        return _result; 
    },
    char_esc : function (_slash, _c) { 
        _ruleEnter ("char_esc");

        var slash = _slash._rwr ();
        var c = _c._rwr ();
        var _result = `${c}`; 
        _ruleExit ("char_esc");
        return _result; 
    },
    char_raw : function (_c) { 
        _ruleEnter ("char_raw");

        var c = _c._rwr ();
        var _result = `${c}`; 
        _ruleExit ("char_raw");
        return _result; 
    },
    ////
    
    // name [c @cs] = [[${c}${cs}]]
    // nameRest [c] = [[${c}]]

    name : function (_c,_cs) { 
        _ruleEnter ("name");

        var c = _c._rwr ();
        var cs = _cs._rwr ().join ('');
        var _result = `${c}${cs}`; 
        _ruleExit ("name");
        return _result; 
    },
    
    nameFirst : function (_c) { 
        _ruleEnter ("nameFirst");

        var c = _c._rwr ();
        var _result = `${c}`; 
        _ruleExit ("nameFirst");
        return _result; 
    },

    nameRest : function (_c) { 
        _ruleEnter ("nameRest");

        var c = _c._rwr ();
        var _result = `${c}`; 
        _ruleExit ("nameRest");
        return _result; 
    },

    ////


    // Param_plus [name k] = [[\nvar ${name} = _${name}._rwr ().join ('');]]
    // Param_star [name k] = [[\nvar ${name} = _${name}._rwr ().join ('');]]
    // Param_opt [name k] = [[\nvar ${name} = _${name}._rwr ().join ('');]]
    // Param_flat [name] = [[\nvar ${name} = _${name}._rwr ();]]


    Param_plus : function (_name,_k) { 
        _ruleEnter ("Param_plus");

        var name = _name._rwr ();
        var k = _k._rwr ();
        var _result = `\n${name} = ${name}._rwr ().join ('');`; 
        _ruleExit ("Param_plus");
        return _result; 
    },
    
    Param_star : function (_name,_k) { 
        _ruleEnter ("Param_star");

        var name = _name._rwr ();
        var k = _k._rwr ();
        var _result = `\n${name} = ${name}._rwr ().join ('');`; 
        _ruleExit ("Param_star");
        return _result; 
    },
    
    Param_opt : function (_name,_k) { 
        _ruleEnter ("Param_opt");

        var name = _name._rwr ();
        var k = _k._rwr ();
        var _result = `\n${name} = ${name}._rwr ().join ('');`; 
        _ruleExit ("Param_opt");
        return _result; 
    },
    
    Param_flat : function (_name) { 
        _ruleEnter ("Param_flat");

        var name = _name._rwr ();
        var _result = `\n${name} = ${name}._rwr ();`; 
        _ruleExit ("Param_flat");
        return _result; 
    },
    
    ////

    _terminal: function () { return this.sourceString; },
    _iter: function (...children) { return children.map(c => c._rwr ()); },
    spaces: function (x) { return this.sourceString; },
    space: function (x) { return this.sourceString; }
};
// yyy

function fetchGrammarName (grammar) {
    // return the name of the grammar (first ident in the string grammar)
    // TODO: this can probably be improved 
    let pattern = /^[ \t]*\w+/m;
    try {
	let r = pattern.exec (grammar);
	return r[0].trim();
    } catch (err) {
	return '';
    }
}

function transpile (src, grammar, rwr, ohmlang, comprwr, supportfname) {
    let grammarname = fetchGrammarName (grammar);
    return multi_transpile (src, grammarname, grammar, rwr, ohmlang, comprwr, supportfname);
}

function multi_transpile (src, grammarname, grammar, rwr, ohmlang, comprwr, supportfname) {
    [matchsuccess, trgrammar, cst, errormessage] = patternmatch (src, grammarname, grammar, ohmlang);
    if (!matchsuccess) {
	return [false, "", `pattern matching error<br><br> in /${grammarname}/: ` + errormessage];
    } else if (rwr === undefined || rwr === '') {
	return [false, "", `pattern matching succeeded in /${grammarname}/ (but without rwrrication):<br><br>` + errormessage];
    } else {
	[success, semanticsFunctionsAsString] = comprwr (rwr, ohmlang);
	if (!success) {
	    var errorMessage = semanticsFunctionsAsString
	    return [false, null, errorMessage];
	}
	var evalableSemanticsFunctions = '(' + semanticsFunctionsAsString + ')';
	var sem = trgrammar.createSemantics ();
	try {
	    semobj = eval (evalableSemanticsFunctions);
	} catch (err) {
	    //console.error (evalableSemanticsFunctions);
	    //console.error (rwr);
	    let fgrammarname = fetchGrammarName (rwr);
	    return [false, null, `error evaling .rwr specification in /${fgrammarname}/<br><br>` + err.message];
	}
	try {
	    sem.addOperation ("_rwr", semobj);
	} catch (err) {
	    let fgrammarname = fetchGrammarName (rwr);
	    return [false, null, `error in .rwr specification /${fgrammarname}/ <br><br>: ` + err.message];
	}
        var generatedRwrWalker = sem (cst);
        try {
	    //tracing = true;
            if (supportfname) {
		var support = fs.readFileSync (supportfname, 'UTF-8');
		eval (support);
	    }
	    var generated = generatedRwrWalker._rwr ();
	} catch (err) {
	    let fgrammarname = fetchGrammarName (rwr);
	    return [false, '', `tree walking in /${fgrammarname}/: ` +  err.message];
	}
	return [true, generated, ""];
    }
}


function patternmatch (src, grammarname, grammar, ohmlang) {
    var pmgrammars = undefined;
    var pmgrammar = undefined;
    var emessage = '';
    try {
	pmgrammars = ohmlang.grammars (grammar);
	pmgrammar = pmgrammars [grammarname];
    } catch (err) {
	emessage = err.message;
    }
    if (pmgrammar === undefined) {
	return [false, undefined, undefined, `\nerror in grammar ${emessage}`];
    }

    try {
	var cst = pmgrammar.match (src);
    } catch (err) {
	return [false, undefined, undefined, err.message];
    }
    if (cst.failed ()) {
	return [false, pmgrammar, cst, cst.message];
    } else { 
	return [true, pmgrammar, cst, ""];
    }
	
}


/// helpers
var tracing = false;

function _ruleInit () {
}

function traceSpaces () {
    var s = '';
    var n = traceDepth;
    while (n > 0) {
        s += ' ';
        n -= 1;
    }
    s += `[${traceDepth.toString ()}]`;
    return s;
}

function _ruleEnter (ruleName) {
    if (tracing) {
        traceDepth += 1;
        var s = traceSpaces ();
        s += 'enter: ';
        s += ruleName.toString ();
        console.log (s);
    }
}

function _ruleExit (ruleName) {
    if (tracing) {
        var s = traceSpaces ();
        traceDepth -= 1;
        s += 'exit: ';
        s += ruleName.toString ();
        console.log (s);
    }
}

function getRwrGrammar () {
    return rwrGrammar;
}

  // helper functions
  var ruleName = "???";
  function setRuleName (s) { ruleName = s; return "";}
  function getRuleName () { return ruleName; }

/// end helpers

var argv;

function main (argv) {
    try {
	argv = require('yargs/yargs')(process.argv.slice(2)).argv;
	viewGeneratedCode = false;
	tracing = false;
	traceDepth = 0;
	srcfilename = '/dev/fd/0';
	var grammarfilename = argv._[0];
	var rwrfilename = argv._[1];
	var src = fs.readFileSync (srcfilename, 'utf-8');
	var grammar = fs.readFileSync (grammarfilename, 'utf-8');
	var rwr = fs.readFileSync (rwrfilename, 'utf-8');
	var support = argv._[2];
	var r;
	if (argv.grammarname) {
	    r = multi_transpile (src, argv.grammarname, grammar, rwr, ohm, compilerwr, support);
	} else {
	    r = transpile (src, grammar, rwr, ohm, compilerwr, support);
	}
	var success = r [0]
	var transpiled = r [1]
	var errormessage = r [2]
	if (success) {
	    emit (transpiled);
	    process.exit (0);
	} else {
	    erremit (errormessage);
	    process.exit (1);
	}
    } catch (e) {
	console.error (e.message);
	process.exit (1);
    }
}
function emit (s) {
    console.log (s);
}

function erremit (s) {
    console.error (s);
}

main ();
