RWR {
top [ws1 name ws2 lb ws4 rule+ ws5 rb ws3 more*] = ‛{
«rule»«more»
    _terminal: function () { return this.sourceString; },
    _iter: function (...children) { return children.map(c => c.rwr ()); },
    spaces: function (x) { return this.sourceString; },
    space: function (x) { return this.sourceString; }
}
’
more [name ws2 lb ws4 rule* ws5 rb ws3] = ‛
«rule»
`

rule_up [lhs ws1 keq ws2 rws] = 
‛«lhs»
_ruleExit ("«getRuleName ()»");
return «rws»
},
’ 
    
RuleLHS_nodown [name lb Params* rb] = ‛«name»: function («extractFormals(Params)») {\n_ruleEnter ("«name»");«setRuleName (name)»«Params»’

RuleLHS_down [name lb Params* rb ws1 downstring ws2] = ‛
        `«name»: function («extractFormals(Params)») {\n_ruleEnter ("«name»");«setRuleName (name)»\nvar _0 = «_downstring.rwr ()»;\n«Params»
`
rewriteString [sb cs* se ws] = ‛return \‛«cs»\’;’

downString [lq cs* rq] = ‛«cs»’

char_eval [lb name rb] = ‛«name»’
char_raw [c] = ‛«c»’
char_newline [kbs kn] = ‛\n’
char_esc [kbs c] = ‛«c»’
name [c cs*] = ‛«c»«cs»’
nameRest [c] = ‛«c»’

 Param_plus [name k] = ‛\nvar «name» = _«name».rwr ().join ('');’
 Param_star [name k] = ‛\nvar «name» = _«name».rwr ().join ('');’
 Param_opt [name k] = ‛\nvar «name» = _«name».rwr ().join ('');’
 Param_flat [name] = ‛\nvar «name» = _«name».rwr ();’

 comment [kslsl c* nl] = ‛’
}
