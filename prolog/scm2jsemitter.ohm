Scm2JSEmitter {
  Program = (GlobalVariableDefinition | GlobalFunctionDefinition | TopLevelFunctionCall)+
  Form = SList | Atom

  DottedList = "(" ListItem+ "." ListItem ")"
  NullTerminatedList =   "(" ListItem* ")"
  ListItem = (Atom | SList)
  Atom = lexical_atom

  SList =   BEGIN lexical_AtNewListAt ListItem* END -- atnewlistat
          | BEGIN lexical_AtNewDottedListAt ListItem* END -- atnewdottedlistat
          | SpecialForm 
          | FunctionCall
          | NullTerminatedList
          | DottedList 

    SpecialForm = QuotedExpression | CondExpression | LetExpression | IfThenElseExpression | IfThenExpression | AndExpression | OrExpression | NotExpression | SetExpression


  CondExpression = CondExpressionWithElse | CondExpressionWithoutElse
  CondExpressionWithElse = BEGIN lexical_COND FirstCondClause MoreCondClause* CondElseClause END
  CondExpressionWithoutElse = BEGIN lexical_COND FirstCondClause MoreCondClause* END
    
  FirstCondClause = CondClause
  MoreCondClause = CondClause
  CondClause = BEGIN ~lexical_ELSE CondTest CondStatementBlock END

  CondTest = Form

  CondElseClause = BEGIN lexical_ELSE CondStatementBlock END

  CondStatementBlock = StatementBlock

  StatementBlock = SequentialStatement
  SequentialStatement = MidStatement* LastStatement
  MidStatement = Statement &Statement
  LastStatement = Statement ~Statement
  Statement = Form



  LetExpression = LetSequential | LetParallel

  LetSequential = BEGIN lexical_LETSTAR LetBindings LetBody END
  LetParallel = BEGIN lexical_LET LetBindings LetBody END

  LetBindings = BEGIN Binding+ END
  Binding = BEGIN LetVar LetBindingClause END
  LetVar = lexical_symbol
  LetBindingClause = Form
  LetBody = StatementBlock
    

  IfThenElseExpression = BEGIN lexical_IF IfTestExpr ThenPart ElsePart END
  IfThenExpression = BEGIN lexical_IF IfTestExpr ThenPart END
  IfTestExpr = Form
  ThenPart = Form
  ElsePart = Form

  AndExpression = BEGIN lexical_AND Bool+ END
  OrExpression = BEGIN lexical_OR Bool+ END
  NotExpression = BEGIN lexical_NOT Bool END
  Bool = Form

  SetExpression = BEGIN lexical_SET SetVar SetExpr END
  SetVar = Identifier
  SetExpr = Form

  FunctionCall = BEGIN Identifier Arg* END
  Identifier = ~Keyword lexical_symbol
  Arg = ListItem


  GlobalFunctionDefinition = BEGIN lexical_DEFINE BEGIN Identifier Identifier* END StatementBlock END
    
  GlobalVariableDefinition = BEGIN lexical_DEFINE Identifier Form END
  TopLevelFunctionCall = FunctionCall


  BEGIN = "("
  END = ")"

  QuotedExpression = QuotedSymbol | QuotedOther
  QuotedSymbol = BEGIN lexical_QUOTE lexical_symbol END
  QuotedOther = BEGIN lexical_QUOTE (lexical_integer | lexical_string | lexical_boolean) END


  Keyword =   lexical_DEFINE
            | lexical_COND 
            | lexical_IF
            | lexical_LET
            | lexical_LETSTAR
            | lexical_AtNewListAt 
            | lexical_AtNewDottedListAt 
            | lexical_AND | lexical_OR | lexical_NOT
            | lexical_ELSE
            | lexical_QUOTE
            | lexical_SET

  lexical_AND = "and" ~alnum space*
  lexical_OR = "or" ~alnum space*
  lexical_NOT = "not" ~alnum space*
  lexical_AtNewListAt = "@newList@" ~alnum space*
  lexical_AtNewDottedListAt = "@newDottedList@" ~alnum space*
  lexical_DEFINE = "define" ~alnum space*
  lexical_IF = "if" ~alnum space*
  lexical_COND = "cond" ~alnum space*
  lexical_ELSE = "else" ~alnum space*
  lexical_LETSTAR = "let*" ~alnum space*
  lexical_LET = "let" ~alnum space*
  lexical_QUOTE = "quote" ~alnum space*
  lexical_SET = "set!" ~alnum space*

  lexical_atom = lexical_integer | lexical_symbol | lexical_string | lexical_boolean
  lexical_boolean = "#f" | "#t"
  lexical_integer = lexical_numchar+
  lexical_numchar = "0".."9"
  lexical_string = "\"" (~"\"" any)+ "\""
  lexical_symbol = lexical_letchar (lexical_letchar | lexical_numchar)*
  lexical_letchar = lexical_lc | lexical_uc | "+" | "*" | "!" | "?"  | "_" | "-" | "="
  lexical_lc = "a".."z"
  lexical_uc = "A".."Z"
  semiColonComment = ";" (~"\n" any)* "\n"
  space += semiColonComment

}