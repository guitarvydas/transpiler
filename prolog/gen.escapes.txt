(defineₓ (valueₓ pₓ qₓ)
  (letₓ ((Aₓ Bₓ))
    (ifₓ Xₓ
	(ifₓ Pₓ
	    Qₓ
	    Rₓ)
	Zₓ)))

;;&nbsp;(define&nbsp;(value&nbsp;x&nbsp;e)
;;&nbsp;&nbsp;&nbsp;(cond&nbsp;((foreign?&nbsp;x)
;;&nbsp;&#9;&nbsp;(call-foreign&nbsp;x&nbsp;e))
;;&nbsp;&#9;((var?&nbsp;x)
;;&nbsp;&#9;&nbsp;(let&nbsp;((v&nbsp;(lookup&nbsp;x&nbsp;e)))
;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(if&nbsp;v
;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(value&nbsp;(cadr&nbsp;v)&nbsp;e)
;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x)))
;;&nbsp;&#9;(else&nbsp;x)))


;;&nbsp;(define&nbsp;(append3&nbsp;list1&nbsp;list2&nbsp;list3)
;;&nbsp;&nbsp;&nbsp;(append2&nbsp;list1&nbsp;(append2&nbsp;list2&nbsp;list3)))

;;&nbsp;(define&nbsp;result_&nbsp;&39;())
;;&nbsp;(define&nbsp;(clear_result)&nbsp;(set!&nbsp;result_&nbsp;&39;()))

;;&nbsp;(define&nbsp;(foreign?&nbsp;expr)
;;&nbsp;&nbsp;&nbsp;(and&nbsp;(pair?&nbsp;expr)
;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(string?&nbsp;(car&nbsp;expr))
;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(string=?&nbsp;&quot;@&quot;&nbsp;(car&nbsp;expr))))

;;&nbsp;(define&nbsp;(call-foreign&nbsp;expr&nbsp;bindings)
;;&nbsp;&nbsp;&nbsp;(let&nbsp;((func&nbsp;(cadr&nbsp;expr))
;;&nbsp;&#9;(args&nbsp;(cddr&nbsp;expr)))

;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(cond&nbsp;((string=?&nbsp;&quot;unity&quot;&nbsp;func)
;;&nbsp;&#9;&nbsp;&nbsp;&nbsp;(car&nbsp;args))

;;&nbsp;&#9;&nbsp;&nbsp;((string=?&nbsp;&quot;add&quot;&nbsp;func)
;;&nbsp;&#9;&nbsp;&nbsp;&nbsp;(let&nbsp;((resolved-args&nbsp;(resolveArgs&nbsp;args&nbsp;bindings)))
;;&nbsp;&#9;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(+&nbsp;(car&nbsp;resolved-args)&nbsp;(cadr&nbsp;resolved-args))))

;;&nbsp;&#9;&nbsp;&nbsp;((string=?&nbsp;&quot;display&quot;&nbsp;func)
;;&nbsp;&#9;&nbsp;&nbsp;&nbsp;(let&nbsp;((a&nbsp;(value&nbsp;(car&nbsp;args)&nbsp;bindings)))
;;&nbsp;&#9;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(display&nbsp;a)))
	  
;;&nbsp;&#9;&nbsp;&nbsp;((string=?&nbsp;&quot;newline&quot;&nbsp;func)
;;&nbsp;&#9;&nbsp;&nbsp;&nbsp;(newline))
	  
;;&nbsp;&#9;&nbsp;&nbsp;(else&nbsp;(error&nbsp;&quot;call-foreign&nbsp;called&nbsp;with&nbsp;unknown&nbsp;operator&quot;&nbsp;func)))))


;;&nbsp;;&nbsp;9-slide&nbsp;PROVE
;;&nbsp;(clear_result)
;;&nbsp;(newline)&nbsp;&nbsp;
;;&nbsp;(newline)&nbsp;&nbsp;
;;&nbsp;(prove6&nbsp;&39;()&nbsp;goals&nbsp;db&nbsp;empty&nbsp;1&nbsp;&39;()&nbsp;db)
;;&nbsp;(display_result)
;;&nbsp;(newline)&nbsp;&nbsp;
 (newlineₓ)



